# Copyright (c) Meta Platforms, Inc. and affiliates.
# All rights reserved.
#
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree.

# pyre-strict
from typing import Any, Dict, List, Sequence, Tuple

class ExecutorchModule:
    def run_method(self, method_name: str, inputs: Sequence[Any]) -> List[Any]: ...
    def forward(self, inputs: Sequence[Any]) -> List[Any]: ...
    # Bundled program methods.
    def load_bundled_input(
        self, bundle: BundledModule, method_name: str, testset_idx: int
    ) -> None: ...
    def verify_result_with_bundled_expected_output(
        self,
        bundle: BundledModule,
        method_name: str,
        testset_idx: int,
        rtol: float = 1e-5,
        atol: float = 1e-8,
    ) -> None: ...

class BundledModule: ...

def _load_for_executorch(path: str) -> ExecutorchModule: ...
def _load_for_executorch_from_buffer(buffer: bytes) -> ExecutorchModule: ...
def _load_for_executorch_from_bundled_program(
    module: BundledModule,
) -> ExecutorchModule: ...
def _load_bundled_program_from_buffer(
    buffer: bytes, non_const_pool_size: int = ...
) -> BundledModule: ...
def _create_profile_block(name: str) -> None: ...
def _dump_profile_results() -> bytes: ...
def _reset_profile_results() -> None: ...
