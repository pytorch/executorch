# automatically generated by the FlatBuffers compiler, do not modify

# namespace: tflite

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class UnidirectionalSequenceLSTMOptions(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UnidirectionalSequenceLSTMOptions()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUnidirectionalSequenceLSTMOptions(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    @classmethod
    def UnidirectionalSequenceLSTMOptionsBufferHasIdentifier(
        cls, buf, offset, size_prefixed=False
    ):
        return flatbuffers.util.BufferHasIdentifier(
            buf, offset, b"\x54\x46\x4C\x33", size_prefixed=size_prefixed
        )

    # UnidirectionalSequenceLSTMOptions
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UnidirectionalSequenceLSTMOptions
    def FusedActivationFunction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # UnidirectionalSequenceLSTMOptions
    def CellClip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.Float32Flags, o + self._tab.Pos
            )
        return 0.0

    # UnidirectionalSequenceLSTMOptions
    def ProjClip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.Float32Flags, o + self._tab.Pos
            )
        return 0.0

    # UnidirectionalSequenceLSTMOptions
    def TimeMajor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(
                self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
            )
        return False

    # UnidirectionalSequenceLSTMOptions
    def AsymmetricQuantizeInputs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(
                self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
            )
        return False

    # UnidirectionalSequenceLSTMOptions
    def DiagonalRecurrentTensors(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(
                self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
            )
        return False


def UnidirectionalSequenceLSTMOptionsStart(builder):
    builder.StartObject(6)


def Start(builder):
    UnidirectionalSequenceLSTMOptionsStart(builder)


def UnidirectionalSequenceLSTMOptionsAddFusedActivationFunction(
    builder, fusedActivationFunction
):
    builder.PrependInt8Slot(0, fusedActivationFunction, 0)


def AddFusedActivationFunction(builder, fusedActivationFunction):
    UnidirectionalSequenceLSTMOptionsAddFusedActivationFunction(
        builder, fusedActivationFunction
    )


def UnidirectionalSequenceLSTMOptionsAddCellClip(builder, cellClip):
    builder.PrependFloat32Slot(1, cellClip, 0.0)


def AddCellClip(builder, cellClip):
    UnidirectionalSequenceLSTMOptionsAddCellClip(builder, cellClip)


def UnidirectionalSequenceLSTMOptionsAddProjClip(builder, projClip):
    builder.PrependFloat32Slot(2, projClip, 0.0)


def AddProjClip(builder, projClip):
    UnidirectionalSequenceLSTMOptionsAddProjClip(builder, projClip)


def UnidirectionalSequenceLSTMOptionsAddTimeMajor(builder, timeMajor):
    builder.PrependBoolSlot(3, timeMajor, 0)


def AddTimeMajor(builder, timeMajor):
    UnidirectionalSequenceLSTMOptionsAddTimeMajor(builder, timeMajor)


def UnidirectionalSequenceLSTMOptionsAddAsymmetricQuantizeInputs(
    builder, asymmetricQuantizeInputs
):
    builder.PrependBoolSlot(4, asymmetricQuantizeInputs, 0)


def AddAsymmetricQuantizeInputs(builder, asymmetricQuantizeInputs):
    UnidirectionalSequenceLSTMOptionsAddAsymmetricQuantizeInputs(
        builder, asymmetricQuantizeInputs
    )


def UnidirectionalSequenceLSTMOptionsAddDiagonalRecurrentTensors(
    builder, diagonalRecurrentTensors
):
    builder.PrependBoolSlot(5, diagonalRecurrentTensors, 0)


def AddDiagonalRecurrentTensors(builder, diagonalRecurrentTensors):
    UnidirectionalSequenceLSTMOptionsAddDiagonalRecurrentTensors(
        builder, diagonalRecurrentTensors
    )


def UnidirectionalSequenceLSTMOptionsEnd(builder):
    return builder.EndObject()


def End(builder):
    return UnidirectionalSequenceLSTMOptionsEnd(builder)
