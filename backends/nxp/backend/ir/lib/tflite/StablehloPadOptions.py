# automatically generated by the FlatBuffers compiler, do not modify

# namespace: tflite

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class StablehloPadOptions(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StablehloPadOptions()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStablehloPadOptions(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    @classmethod
    def StablehloPadOptionsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(
            buf, offset, b"\x54\x46\x4C\x33", size_prefixed=size_prefixed
        )

    # StablehloPadOptions
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StablehloPadOptions
    def EdgePaddingLow(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(
                flatbuffers.number_types.Int64Flags,
                a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8),
            )
        return 0

    # StablehloPadOptions
    def EdgePaddingLowAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # StablehloPadOptions
    def EdgePaddingLowLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StablehloPadOptions
    def EdgePaddingLowIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # StablehloPadOptions
    def EdgePaddingHigh(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(
                flatbuffers.number_types.Int64Flags,
                a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8),
            )
        return 0

    # StablehloPadOptions
    def EdgePaddingHighAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # StablehloPadOptions
    def EdgePaddingHighLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StablehloPadOptions
    def EdgePaddingHighIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # StablehloPadOptions
    def InteriorPadding(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(
                flatbuffers.number_types.Int64Flags,
                a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8),
            )
        return 0

    # StablehloPadOptions
    def InteriorPaddingAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # StablehloPadOptions
    def InteriorPaddingLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StablehloPadOptions
    def InteriorPaddingIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0


def StablehloPadOptionsStart(builder):
    builder.StartObject(3)


def Start(builder):
    StablehloPadOptionsStart(builder)


def StablehloPadOptionsAddEdgePaddingLow(builder, edgePaddingLow):
    builder.PrependUOffsetTRelativeSlot(
        0, flatbuffers.number_types.UOffsetTFlags.py_type(edgePaddingLow), 0
    )


def AddEdgePaddingLow(builder, edgePaddingLow):
    StablehloPadOptionsAddEdgePaddingLow(builder, edgePaddingLow)


def StablehloPadOptionsStartEdgePaddingLowVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)


def StartEdgePaddingLowVector(builder, numElems: int) -> int:
    return StablehloPadOptionsStartEdgePaddingLowVector(builder, numElems)


def StablehloPadOptionsAddEdgePaddingHigh(builder, edgePaddingHigh):
    builder.PrependUOffsetTRelativeSlot(
        1, flatbuffers.number_types.UOffsetTFlags.py_type(edgePaddingHigh), 0
    )


def AddEdgePaddingHigh(builder, edgePaddingHigh):
    StablehloPadOptionsAddEdgePaddingHigh(builder, edgePaddingHigh)


def StablehloPadOptionsStartEdgePaddingHighVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)


def StartEdgePaddingHighVector(builder, numElems: int) -> int:
    return StablehloPadOptionsStartEdgePaddingHighVector(builder, numElems)


def StablehloPadOptionsAddInteriorPadding(builder, interiorPadding):
    builder.PrependUOffsetTRelativeSlot(
        2, flatbuffers.number_types.UOffsetTFlags.py_type(interiorPadding), 0
    )


def AddInteriorPadding(builder, interiorPadding):
    StablehloPadOptionsAddInteriorPadding(builder, interiorPadding)


def StablehloPadOptionsStartInteriorPaddingVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)


def StartInteriorPaddingVector(builder, numElems: int) -> int:
    return StablehloPadOptionsStartInteriorPaddingVector(builder, numElems)


def StablehloPadOptionsEnd(builder):
    return builder.EndObject()


def End(builder):
    return StablehloPadOptionsEnd(builder)
