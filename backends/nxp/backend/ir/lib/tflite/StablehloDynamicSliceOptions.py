# automatically generated by the FlatBuffers compiler, do not modify

# namespace: tflite

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class StablehloDynamicSliceOptions(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StablehloDynamicSliceOptions()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStablehloDynamicSliceOptions(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    @classmethod
    def StablehloDynamicSliceOptionsBufferHasIdentifier(
        cls, buf, offset, size_prefixed=False
    ):
        return flatbuffers.util.BufferHasIdentifier(
            buf, offset, b"\x54\x46\x4C\x33", size_prefixed=size_prefixed
        )

    # StablehloDynamicSliceOptions
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StablehloDynamicSliceOptions
    def SliceSizes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(
                flatbuffers.number_types.Int64Flags,
                a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8),
            )
        return 0

    # StablehloDynamicSliceOptions
    def SliceSizesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # StablehloDynamicSliceOptions
    def SliceSizesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StablehloDynamicSliceOptions
    def SliceSizesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0


def StablehloDynamicSliceOptionsStart(builder):
    builder.StartObject(1)


def Start(builder):
    StablehloDynamicSliceOptionsStart(builder)


def StablehloDynamicSliceOptionsAddSliceSizes(builder, sliceSizes):
    builder.PrependUOffsetTRelativeSlot(
        0, flatbuffers.number_types.UOffsetTFlags.py_type(sliceSizes), 0
    )


def AddSliceSizes(builder, sliceSizes):
    StablehloDynamicSliceOptionsAddSliceSizes(builder, sliceSizes)


def StablehloDynamicSliceOptionsStartSliceSizesVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)


def StartSliceSizesVector(builder, numElems: int) -> int:
    return StablehloDynamicSliceOptionsStartSliceSizesVector(builder, numElems)


def StablehloDynamicSliceOptionsEnd(builder):
    return builder.EndObject()


def End(builder):
    return StablehloDynamicSliceOptionsEnd(builder)
