//
// Copyright (c) Qualcomm Innovation Center, Inc.
// All rights reserved.
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.
//

namespace qcir;

enum TensorType : byte {
    WRITE = 0,
    READ,
    READWRITE,
    NATIVE,
    STATIC,
    OPTIONAL,
    UNDEFINED,
}

enum DataType : byte {
    INT8 = 0,
    INT16,
    INT32,
    INT64,
    UINT8,
    UINT16,
    UINT32,
    UINT64,
    FLOAT16,
    FLOAT32,
    FLOAT64,
    SFIXED4,
    SFIXED8,
    SFIXED16,
    SFIXED32,
    UFIXED4,
    UFIXED8,
    UFIXED16,
    UFIXED32,
    BOOL,
    STRING,
    UNDEFINED,
}

enum QuantizeDef : byte {
    IMPL_GENERATED = 0,
    DEFINED,
    UNDEFINED,
}

enum QuantizeType : byte {
    SCALE_OFFSET = 0,
    AXIS_SCALE_OFFSET,
    BW_SCALE_OFFSET,
    BW_AXIS_SCALE_OFFSET,
    UNDEFINED,
}

struct ScaleOffset {
    scale: float;
    offset: int;
}

table QuantizeParam {
    def: QuantizeDef;
    type: QuantizeType;
    bitwidth: uint;
    axis: int;
    // used by bitwidth quantization
    scales: [float];
    offsets: [int];
    // used by general quantization
    data: [ScaleOffset];
}

table Tensor {
    name: string;
    shape: [uint];
    type: TensorType;
    dtype: DataType;
    qparam: QuantizeParam;
    data: [ubyte];
}

table Operator {
    name: string;
    package_name: string;
    type_name: string;
    // keep only tensor indexes
    inputs: [int];
    outputs: [int];
    params: [int];
}

table Graph {
    nodes: [Operator];
    tensors: [Tensor];
}

root_type Graph;
