From b3c8c3f779a7e051826f317598fb831fa9cfe923 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Per=20=C3=85strand?= <per.astrand@arm.com>
Date: Wed, 5 Feb 2025 12:30:09 +0100
Subject: [PATCH] Make TOSA serializer lib to be self contained

---
 CMakeLists.txt                       |  4 ++
 python/serializer/tosa_serializer.py | 57 ++++++++++++++--------------
 2 files changed, 32 insertions(+), 29 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index ac34b75..5e191aa 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -19,6 +19,8 @@
 cmake_minimum_required(VERSION 3.13.4)
 project(TosaSerialization)
 
+cmake_policy(SET CMP0077 NEW)
+
 set(CMAKE_CXX_STANDARD 14 CACHE STRING "C++ standard to conform to")
 set(CMAKE_CXX_STANDARD_REQUIRED YES)
 
@@ -27,6 +29,8 @@ set(CMAKE_VERBOSE_MAKEFILE ON)
 option(BUILD_TESTS "Build test applications" ON)
 option(FLATBUFFERS_ROOT "Location where the flatbuffers 'include' and 'lib' folders to be found" Off)
 
+message(STATUS "FLATBUFFERS_ROOT set to: ${FLATBUFFERS_ROOT}")
+
 include_directories(${PROJECT_SOURCE_DIR}/third_party/half/include)
 
 include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)
diff --git a/python/serializer/tosa_serializer.py b/python/serializer/tosa_serializer.py
index 7bc75f0..d191997 100644
--- a/python/serializer/tosa_serializer.py
+++ b/python/serializer/tosa_serializer.py
@@ -14,12 +14,11 @@
 
 import os
 import struct
-import serializer.tosa_serializer as ts
 import json
 import flatbuffers
 import numpy as np
 from enum import IntEnum, unique
-from tosa import (
+from ..tosa import (
     TosaGraph,
     TosaRegion,
     TosaBasicBlock,
@@ -27,8 +26,8 @@ from tosa import (
     TosaOperator,
     Version,
 )
-import tosa.DType as TosaDType
-import tosa.Op as TosaOp
+from ..tosa import DType as TosaDType
+from ..tosa import Op as TosaOp
 
 # Keep version number in sync with the version default value with schema/tosa.fbs
 TOSA_VERSION_MAJOR = 0
@@ -159,7 +158,7 @@ class TosaSerializerAttribute(TosaSerializerUnion):
         output_zp,
         accum_dtype,
     ):
-        from tosa import PoolAttribute as a, Attribute
+        from ..tosa import PoolAttribute as a, Attribute
 
         self.utype = Attribute.Attribute().PoolAttribute
 
@@ -172,7 +171,7 @@ class TosaSerializerAttribute(TosaSerializerUnion):
         self.ints.append((a.AddAccumDtype, accum_dtype))
 
     def ConvAttribute(self, pad, stride, dilation, input_zp, weight_zp, local_bound):
-        from tosa import ConvAttribute as a, Attribute
+        from ..tosa import ConvAttribute as a, Attribute
 
         self.utype = Attribute.Attribute().ConvAttribute
         self.optFcns = (a.Start, a.End)
@@ -187,7 +186,7 @@ class TosaSerializerAttribute(TosaSerializerUnion):
     def TransposeConvAttribute(
         self, outpad, stride, output_shape, input_zp, weight_zp, local_bound
     ):
-        from tosa import TransposeConvAttribute as a, Attribute
+        from ..tosa import TransposeConvAttribute as a, Attribute
 
         self.utype = Attribute.Attribute().TransposeConvAttribute
         self.optFcns = (a.Start, a.End)
@@ -200,7 +199,7 @@ class TosaSerializerAttribute(TosaSerializerUnion):
         self.bools.append((a.AddLocalBound, local_bound))
 
     def PadAttribute(self, serializer_builder, padding, pad_const_int, pad_const_fp):
-        from tosa import PadAttribute as a, Attribute
+        from ..tosa import PadAttribute as a, Attribute
 
         self.utype = Attribute.Attribute().PadAttribute
         self.optFcns = (a.Start, a.End)
@@ -210,14 +209,14 @@ class TosaSerializerAttribute(TosaSerializerUnion):
 
         # pad_const_fp attribute serialized as uint8 vector
         pad_const_float_as_bytes = struct.pack("<f", pad_const_fp)
-        serialized_pad_const_fp = ts.TosaSerializer.serializeUint8Vec(
+        serialized_pad_const_fp = TosaSerializer.serializeUint8Vec(
             serializer_builder, pad_const_float_as_bytes
         )
 
         self.floats.append((a.AddPadConstFp, serialized_pad_const_fp))
 
     def AxisAttribute(self, axis):
-        from tosa import AxisAttribute as a, Attribute
+        from ..tosa import AxisAttribute as a, Attribute
 
         self.utype = Attribute.Attribute().AxisAttribute
         self.optFcns = (a.Start, a.End)
@@ -225,7 +224,7 @@ class TosaSerializerAttribute(TosaSerializerUnion):
         self.ints.append((a.AddAxis, axis))
 
     def ReshapeAttribute(self, new_shape):
-        from tosa import ReshapeAttribute as a, Attribute
+        from ..tosa import ReshapeAttribute as a, Attribute
 
         self.utype = Attribute.Attribute().ReshapeAttribute
         self.optFcns = (a.Start, a.End)
@@ -233,7 +232,7 @@ class TosaSerializerAttribute(TosaSerializerUnion):
         self.intvecs.append((a.AddNewShape, new_shape))
 
     def SliceAttribute(self, start, size):
-        from tosa import SliceAttribute as a, Attribute
+        from ..tosa import SliceAttribute as a, Attribute
 
         self.utype = Attribute.Attribute().SliceAttribute
         self.optFcns = (a.Start, a.End)
@@ -242,7 +241,7 @@ class TosaSerializerAttribute(TosaSerializerUnion):
         self.intvecs.append((a.AddSize, size))
 
     def TileAttribute(self, multiples):
-        from tosa import TileAttribute as a, Attribute
+        from ..tosa import TileAttribute as a, Attribute
 
         self.utype = Attribute.Attribute().TileAttribute
         self.optFcns = (a.Start, a.End)
@@ -250,7 +249,7 @@ class TosaSerializerAttribute(TosaSerializerUnion):
         self.intvecs.append((a.AddMultiples, multiples))
 
     def ResizeAttribute(self, scale, offset, border, mode):
-        from tosa import ResizeAttribute as a, Attribute
+        from ..tosa import ResizeAttribute as a, Attribute
 
         self.utype = Attribute.Attribute().ResizeAttribute
         self.optFcns = (a.Start, a.End)
@@ -261,7 +260,7 @@ class TosaSerializerAttribute(TosaSerializerUnion):
         self.ints.append((a.AddMode, mode))
 
     def ClampAttribute(self, serializer_builder, minint, maxint, minfp, maxfp):
-        from tosa import ClampAttribute as a, Attribute
+        from ..tosa import ClampAttribute as a, Attribute
 
         self.utype = Attribute.Attribute().ClampAttribute
         self.optFcns = (a.Start, a.End)
@@ -272,10 +271,10 @@ class TosaSerializerAttribute(TosaSerializerUnion):
         # min/max float attributes serialized as uint8 vectors
         minfp_bytes = struct.pack("<f", minfp)
         maxfp_bytes = struct.pack("<f", maxfp)
-        serialized_minfp_bytes = ts.TosaSerializer.serializeUint8Vec(
+        serialized_minfp_bytes = TosaSerializer.serializeUint8Vec(
             serializer_builder, minfp_bytes
         )
-        serialized_maxfp_bytes = ts.TosaSerializer.serializeUint8Vec(
+        serialized_maxfp_bytes = TosaSerializer.serializeUint8Vec(
             serializer_builder, maxfp_bytes
         )
 
@@ -294,7 +293,7 @@ class TosaSerializerAttribute(TosaSerializerUnion):
         input_unsigned,
         output_unsigned,
     ):
-        from tosa import RescaleAttribute as a, Attribute
+        from ..tosa import RescaleAttribute as a, Attribute
 
         self.utype = Attribute.Attribute().RescaleAttribute
         self.optFcns = (a.Start, a.End)
@@ -310,7 +309,7 @@ class TosaSerializerAttribute(TosaSerializerUnion):
         self.bools.append((a.AddOutputUnsigned, output_unsigned))
 
     def MulAttribute(self, shift):
-        from tosa import MulAttribute as a, Attribute
+        from ..tosa import MulAttribute as a, Attribute
 
         self.utype = Attribute.Attribute().MulAttribute
         self.optFcns = (a.Start, a.End)
@@ -318,7 +317,7 @@ class TosaSerializerAttribute(TosaSerializerUnion):
         self.ints.append((a.AddShift, shift))
 
     def ArithmeticRightShiftAttribute(self, round):
-        from tosa import ArithmeticRightShiftAttribute as a, Attribute
+        from ..tosa import ArithmeticRightShiftAttribute as a, Attribute
 
         self.utype = Attribute.Attribute().ArithmeticRightShiftAttribute
         self.optFcns = (
@@ -329,7 +328,7 @@ class TosaSerializerAttribute(TosaSerializerUnion):
         self.bools.append((a.AddRound, round))
 
     def CondIfAttribute(self, then_branch, else_branch):
-        from tosa import CondIfAttribute as a, Attribute
+        from ..tosa import CondIfAttribute as a, Attribute
 
         self.utype = Attribute.Attribute().CondIfAttribute
         self.optFcns = (a.Start, a.End)
@@ -338,7 +337,7 @@ class TosaSerializerAttribute(TosaSerializerUnion):
         self.strings.append((a.AddElseBranch, else_branch))
 
     def WhileLoopAttribute(self, cond_branch, body_branch):
-        from tosa import WhileLoopAttribute as a, Attribute
+        from ..tosa import WhileLoopAttribute as a, Attribute
 
         self.utype = Attribute.Attribute().WhileLoopAttribute
         self.optFcns = (a.Start, a.End)
@@ -347,7 +346,7 @@ class TosaSerializerAttribute(TosaSerializerUnion):
         self.strings.append((a.AddBodyBranch, body_branch))
 
     def TransposeAttribute(self, perms):
-        from tosa import TransposeAttribute as a, Attribute
+        from ..tosa import TransposeAttribute as a, Attribute
 
         self.utype = Attribute.Attribute().TransposeAttribute
         self.optFcns = (a.Start, a.End)
@@ -355,7 +354,7 @@ class TosaSerializerAttribute(TosaSerializerUnion):
         self.intvecs.append((a.AddPerms, perms))
 
     def TableAttribute(self, table):
-        from tosa import TableAttribute as a, Attribute
+        from ..tosa import TableAttribute as a, Attribute
 
         self.utype = Attribute.Attribute().TableAttribute
         self.optFcns = (a.Start, a.End)
@@ -363,7 +362,7 @@ class TosaSerializerAttribute(TosaSerializerUnion):
         self.int16vecs.append((a.AddTable, table))
 
     def MatMulAttribute(self, A_zp, B_zp):
-        from tosa import MatMulAttribute as a, Attribute
+        from ..tosa import MatMulAttribute as a, Attribute
 
         self.utype = Attribute.Attribute().MatMulAttribute
         self.optFcns = (a.Start, a.End)
@@ -372,7 +371,7 @@ class TosaSerializerAttribute(TosaSerializerUnion):
         self.ints.append((a.AddBZp, B_zp))
 
     def FullyConnectedAttribute(self, input_zp, weight_zp):
-        from tosa import FullyConnectedAttribute as a, Attribute
+        from ..tosa import FullyConnectedAttribute as a, Attribute
 
         self.utype = Attribute.Attribute().FullyConnectedAttribute
         self.optFcns = (a.Start, a.End)
@@ -381,7 +380,7 @@ class TosaSerializerAttribute(TosaSerializerUnion):
         self.ints.append((a.AddWeightZp, weight_zp))
 
     def NegateAttribute(self, input1_zp, output_zp):
-        from tosa import NegateAttribute as a, Attribute
+        from ..tosa import NegateAttribute as a, Attribute
 
         self.utype = Attribute.Attribute().NegateAttribute
         self.optFcns = (a.Start, a.End)
@@ -390,7 +389,7 @@ class TosaSerializerAttribute(TosaSerializerUnion):
         self.ints.append((a.AddOutputZp, output_zp))
 
     def FFTAttribute(self, inverse, local_bound):
-        from tosa import FFTAttribute as a, Attribute
+        from ..tosa import FFTAttribute as a, Attribute
 
         self.utype = Attribute.Attribute().FFTAttribute
         self.optFcns = (a.Start, a.End)
@@ -399,7 +398,7 @@ class TosaSerializerAttribute(TosaSerializerUnion):
         self.bools.append((a.AddLocalBound, local_bound))
 
     def RFFTAttribute(self, local_bound):
-        from tosa import RFFTAttribute as a, Attribute
+        from ..tosa import RFFTAttribute as a, Attribute
 
         self.utype = Attribute.Attribute().RFFTAttribute
         self.optFcns = (a.Start, a.End)
-- 
2.39.5 (Apple Git-154)

