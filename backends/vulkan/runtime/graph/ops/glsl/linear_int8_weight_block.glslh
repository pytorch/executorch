/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree.
 */

#ifndef LINEAR_INT8_WEIGHT_BLOCK_GLSLH
#define LINEAR_INT8_WEIGHT_BLOCK_GLSLH

/*
 * This file defines utilties to perform weight prepacking of quantized int8
 * matrix multiplation weights. It also defines utilities to load source
 * weight data from inputbuffer, and write out a packed weight block to output
 * texture/buffer.
 *
 * Requires:
 * - t_packed_int8_weight to be defined in shader layout (output texture/buffer)
 * - t_int8_weight to be defined in shader layout (input buffer)
 *
 * Settings:
 * - USING_BUFFER to indicate if output resource is a buffer. Otherwise texture
 *   is assumed.
 */

#extension GL_EXT_control_flow_attributes : require

#include "linear_common.glslh"

// Represents data for a 4x4 block of the weight matrix read from the input
// buffer.
struct Int8WeightBlock {
  ivec4 data;
};

void load_block_data_no_checks(
    out Int8WeightBlock block,
    const int k4,
    const int n_start,
    const int ntexels_K,
    const int N) {
  [[unroll]] for (int n = 0; n < 4; ++n) {
    block.data[n] = t_int8_weight[(n_start + n) * ntexels_K + k4];
  }
}

void load_block_data_with_checks(
    out Int8WeightBlock block,
    const int k4,
    const int n_start,
    const int ntexels_K,
    const int N) {
  [[unroll]] for (int n = 0; n < 4; ++n) {
    if (n_start + n < N) {
      block.data[n] = t_int8_weight[(n_start + n) * ntexels_K + k4];
    } else {
      block.data[n] = 0;
    }
  }
}

#ifdef USING_BUFFER

void write_weight_block(
    const Int8WeightBlock block,
    const int n4,
    const int k4,
    const int ntexels_N) {
  t_packed_int8_weight[k4 * ntexels_N + n4] = block.data;
}

#else // USING_TEXTURE

void write_weight_block(
    const Int8WeightBlock block,
    const int n4,
    const int k4,
    const int ntexels_N) {
  imageStore(t_packed_int8_weight, ivec2(n4, k4), block.data);
}

#endif // USING_BUFFER

#ifdef DEBUG_MODE

void printInt8WeightBlock(const Int8WeightBlockPacked block) {
  debugPrintfEXT("int8_weight_block_packed: \\n");
  debugPrintfEXT(
      "%i %i %i %i \\n",
      block.data[0],
      block.data[1],
      block.data[2],
      block.data[3]);
}

#endif // DEBUG_MODE

#endif // LINEAR_INT8_WEIGHT_BLOCK_GLSLH
