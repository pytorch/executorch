/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree.
 */

#ifndef CONV2D_COMMON_GLSLH
#define CONV2D_COMMON_GLSLH

#include "common.glslh"

struct Conv2DParams {
  ivec2 kernel_size;
  ivec2 stride;
  ivec2 padding;
  ivec2 dilation;
  int groups;
  int out_channels_per_group;
  int in_channels_per_group;
  int logical_K_per_group;
  int K_per_group;
  int K4_per_group;
  int logical_K;
  int K;
  int K4;
};

#ifdef DEBUG_MODE

void printConv2DParams(const Conv2DParams params) {
  debugPrintfEXT("Conv2DParams: \\n");
  debugPrintfEXT(
      "  kernel_size: %d, %d\\n", params.kernel_size.x, params.kernel_size.y);
  debugPrintfEXT("  stride: %d, %d\\n", params.stride.x, params.stride.y);
  debugPrintfEXT("  padding: %d, %d\\n", params.padding.x, params.padding.y);
  debugPrintfEXT("  dilation: %d, %d\\n", params.dilation.x, params.dilation.y);
  debugPrintfEXT("  groups: %d\\n", params.groups);
  debugPrintfEXT(
      "  out_channels_per_group: %d\\n", params.out_channels_per_group);
  debugPrintfEXT(
      "  in_channels_per_group: %d\\n", params.in_channels_per_group);
  debugPrintfEXT("  logical_K_per_group: %d\\n", params.logical_K_per_group);
  debugPrintfEXT("  K_per_group: %d\\n", params.K_per_group);
  debugPrintfEXT("  K4_per_group: %d\\n", params.K4_per_group);
}

#endif // DEBUG_MODE

#endif // CONV2D_COMMON_GLSLH
