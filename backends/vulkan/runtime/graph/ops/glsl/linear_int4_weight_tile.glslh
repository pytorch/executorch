/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree.
 */

#ifndef LINEAR_INT4_WEIGHT_TILE_GLSLH
#define LINEAR_INT4_WEIGHT_TILE_GLSLH

#include "linear_common.glslh"
#include "linear_fp_weight_tile.glslh"
#include "linear_int8_weight_tile.glslh"

/*
 * Defines the Int4WeightTile struct, which is used to represent a tile of the
 * quantized int4 weight matrix of a quantized matrix multiplication operation.
 *
 * Settings:
 * - TILE_K4: number of (groups of 4) rows in the weight tile
 * - TILE_N8: number of (groups of 8) columns in the weight tile
 */

#extension GL_EXT_control_flow_attributes : require

struct Int4WeightTile {
  ivec4 data[TILE_K4][TILE_N8];
};

#ifdef DEBUG_MODE

void printInt4WeightTile(const Int4WeightTile block) {
  debugPrintfEXT("int4_weight_tile: \\n");
  // Print unpacked 4-bit values for each int in block.data
  [[unroll]] for (int i = 0; i < TILE_K; ++i) {
    const int k4 = div_4(i);
    const int k4i = mod_4(i);
    debugPrintfEXT("block.data[%i] 4-bit values: ", i);
    [[unroll]] for (int col = 0; col < TILE_N; ++col) {
      int val_4bit =
          extract_4bit_from_packed_int_le(block.data[k4][0][k4i], col);
      debugPrintfEXT("[%i] ", val_4bit);
    }
    debugPrintfEXT("\\n");
  }
}

#endif // DEBUG_MODE

#endif // LINEAR_INT4_WEIGHT_TILE_GLSLH
