/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree.
 */

/*
 * Defines the FPOutTile struct, which is used to represent a tile of the output
 * matrix of a matrix multiplication operation.
 *
 * Settings:
 * - TILE_M: number of rows in the output tile
 * - TILE_N4: number of (groups of 4) columns in the output tile
 */

#ifndef LINEAR_FP_OUTPUT_TILE_GLSLH
#define LINEAR_FP_OUTPUT_TILE_GLSLH

#extension GL_EXT_control_flow_attributes : require

struct FPOutTile {
  VEC4_T data[TILE_M][TILE_N4];
};

void initialize(out FPOutTile out_tile) {
#if TILE_N4 == 1
  [[unroll]] for (int m = 0; m < TILE_M; ++m) {
    out_tile.data[m][0] = VEC4_T(0);
  }

#else
  [[unroll]] for (int m = 0; m < TILE_M; ++m) {
    [[unroll]] for (int n4 = 0; n4 < TILE_N4; ++n4) {
      out_tile.data[m][n4] = VEC4_T(0);
    }
  }
#endif
}

#ifdef DEBUG_MODE

void printFPOutTile(const FPOutTile tile) {
  debugPrintfEXT("output_tile: \\n");
  [[unroll]] for (int m = 0; m < TILE_M; ++m) {
    [[unroll]] for (int n4 = 0; n4 < TILE_N4; ++n4) {
      debugPrintfEXT(
          "  %f, %f, %f, %f,",
          tile.data[m][n4].x,
          tile.data[m][n4].y,
          tile.data[m][n4].z,
          tile.data[m][n4].w);
    }
    debugPrintfEXT("\\n");
  }
}

#endif // DEBUG_MODE

#endif // LINEAR_FP_OUTPUT_TILE_GLSLH
