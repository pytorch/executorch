/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree.
 */

#ifndef LINEAR_FP_WEIGHT_SCALES_LOAD_GLSLH
#define LINEAR_FP_WEIGHT_SCALES_LOAD_GLSLH

#include "linear_fp_per_out_channel_params.glslh"

VEC4_T load_weight_scale_x4(const int n4) {
  return t_weight_scales[n4];
}

VEC4_T load_scale_x4(const int n4, const int quant_group_idx, const int N4) {
  return t_weight_scales[quant_group_idx * N4 + n4];
}

void load_weight_scales_tile(
    out FPPerOutChannelParams scales,
    const int n4_start) {
  [[unroll]] for (int n4 = 0; n4 < TILE_N4; ++n4) {
    scales.data[n4] = load_weight_scale_x4(n4_start + n4);
  }
}

void load_weight_scales_tile_for_group(
    out FPPerOutChannelParams scales,
    const int n4_start,
    const int quant_group_idx,
    const int N4) {
  [[unroll]] for (int n4 = 0; n4 < TILE_N4; ++n4) {
    scales.data[n4] = load_scale_x4(n4_start + n4, quant_group_idx, N4);
  }
}

#endif // LINEAR_FP_WEIGHT_SCALES_LOAD_GLSLH
