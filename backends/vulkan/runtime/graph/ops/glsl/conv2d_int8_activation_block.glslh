/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree.
 */

#ifndef CONV2D_INT8_ACTIVATION_BLOCK
#define CONV2D_INT8_ACTIVATION_BLOCK

#extension GL_EXT_control_flow_attributes : require

#include "common.glslh"
#include "conv2d_fp_activation_block.glslh"

struct Int8ActivationBlock {
  ivec4 data;
};

ivec4 quantize_to_8bit(
    const VEC4_T val,
    const float q_inv_scale,
    const int q_zero_point) {
  vec4 quantized = round(vec4(val) * q_inv_scale) + q_zero_point;
  return clamp(ivec4(quantized), -128, 127);
}

void quantize_fp_activation_block(
    out Int8ActivationBlock out_block,
    const FPActivationBlock in_block,
    const float q_inv_scale,
    const int q_zero_point) {
  [[unroll]] for (int w = 0; w < 4; ++w) {
    ivec4 quantized_texel =
        quantize_to_8bit(in_block.data[w], q_inv_scale, q_zero_point);
    out_block.data[w] = pack_4xqint_into_int32(
        quantized_texel[0],
        quantized_texel[1],
        quantized_texel[2],
        quantized_texel[3]);
  }
}

VEC4_T
dequantize_8bit(const ivec4 val, const float q_scale, const int q_zero_point) {
  return VEC4_T(val - q_zero_point) * q_scale;
}

void dequantize_int8_activation_block(
    out FPActivationBlock out_block,
    const Int8ActivationBlock in_block,
    const float q_scale,
    const int q_zero_point) {
  [[unroll]] for (int w = 0; w < 4; ++w) {
    int packed = in_block.data[w];
    out_block.data[w] = dequantize_8bit(
        ivec4(
            extract_8bit_from_packed_int_le(packed, 0),
            extract_8bit_from_packed_int_le(packed, 1),
            extract_8bit_from_packed_int_le(packed, 2),
            extract_8bit_from_packed_int_le(packed, 3)),
        q_scale,
        q_zero_point);
  }
}

#ifdef DEBUG_MODE

void printInt8ActivationBlock(const Int8ActivationBlock block) {
  debugPrintfEXT("Int8ActivationBlock: \\n");
  [[unroll]] for (int row = 0; row < 4; ++row) {
    int packed = block.data[row];
    debugPrintfEXT(
        "  [%d]: %d, %d, %d, %d, \\n",
        row,
        extract_8bit_from_packed_int_le(packed, 0),
        extract_8bit_from_packed_int_le(packed, 1),
        extract_8bit_from_packed_int_le(packed, 2),
        extract_8bit_from_packed_int_le(packed, 3));
  }
}

#endif // DEBUG_MODE

#endif // CONV2D_INT8_ACTIVATION_BLOCK
