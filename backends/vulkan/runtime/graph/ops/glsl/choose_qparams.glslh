/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree.
 */

#ifndef CHOOSE_QPARAMS_GLSLH
#define CHOOSE_QPARAMS_GLSLH

// mapping_type : 0 = ASYM, 1 = SYM, 2 = SYM_NO_CLIP
void calc_scale_zp(
    float lo, float hi,
    int qmin, int qmax,
    int mapping_type,
    float eps,
    out float scale, out int zp) {
  // Handle case where lo and hi are +/-INF (no valid values found)
  if (isinf(lo) || isinf(hi)) {
    lo = 0.0;
    hi = 0.0;
  }

  float minv = min(lo, 0.0);
  float maxv = max(hi, 0.0);

  if (mapping_type == 0) { // asymmetric
    scale = (maxv - minv) / float(qmax - qmin);

    // Handle zero or very small scale
    if (scale == 0.0 || isinf(1.0/scale)) {
      scale = eps;
    }

    if (scale < eps) {
      float org_scale = scale;
      scale = eps;

      // Adjust min and max based on new scale to maintain proper quantization range
      if (minv == 0.0) {
        maxv = eps * float(qmax - qmin);
      } else if (maxv == 0.0) {
        minv = -eps * float(qmax - qmin);
      } else {
        float amplifier = eps / org_scale;
        minv *= amplifier;
        maxv *= amplifier;
      }
    }

    // Calculate zero_point (matching reference implementation)
    float initial_zero_point = float(qmin) - round(minv / scale);
    zp = int(clamp(initial_zero_point, float(qmin), float(qmax)));
  } else { // symmetric -- centred
    float scale_sym;
    if (mapping_type == 1) { // SYM
      float M = max(abs(minv), abs(maxv));
      scale_sym = M / (float(qmax - qmin) * 0.5);
    } else { // SYM_NO_CLIP
      float smin = abs(minv) / max(abs(float(qmin)), 1.0); // Avoid division by zero
      float smax = maxv / max(float(qmax), 1.0); // Avoid division by zero
      scale_sym = max(smin, smax);
    }

    // Handle zero or very small scale
    if (scale_sym == 0.0 || isinf(1.0/scale_sym)) {
      scale_sym = eps;
    }

    scale = max(scale_sym, eps);
    zp = int((qmax + qmin + 1) >> 1); // mid-point â€“ always fits
  }
}

#endif // CHOOSE_QPARAMS_GLSLH
