/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree.
 */

#ifndef QLINEAR_WEIGHT_PACK_UTILS_H
#define QLINEAR_WEIGHT_PACK_UTILS_H

/***********************************
 * Packed Weight data write functions
 *
 * These functions assume that t_qmat2 has been defined in the shader layout as either
 * a storage buffer or a storage image.
 */

#ifdef BUFFER_WEIGHT

void write_transposed_weight_block(const uvec4 block, const uint k4, const uint n8, const uint K4) {
  t_qmat2[n8 * K4 + k4] = block;
}

#else // TEXTURE_WEIGHT

void write_transposed_weight_block(const uvec4 block, const uint k4, const uint n8, const uint K4) {
  imageStore(t_qmat2, ivec2(k4, n8), block);
}

#endif // BUFFER_WEIGHT

/***********************************
 * Utilities for packing weight data
 */

uint extract_4bit_from_packed_uint_le(const uint packed, const uint i) {
  // account for little endian
  uint byte = packed >> (8 * (i / 2)) & 255;
  return (byte  >> (4 - 4 * (i % 2))) & 15;
}

uint pack_8x4bit_into_uint(
    const uint val0,
    const uint val1,
    const uint val2,
    const uint val3,
    const uint val4,
    const uint val5,
    const uint val6,
    const uint val7) {
  return uint(
    (val0 << 28) | (val1 << 24) | (val2 << 20) | (val3 << 16) | (val4 << 12) |
    (val5 << 8) | (val6 << 4) | val7
  );
}

#endif // QLINEAR_WEIGHT_PACK_UTILS_H
