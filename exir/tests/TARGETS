load("@fbcode_macros//build_defs:cpp_library.bzl", "cpp_library")
load("@fbcode_macros//build_defs:python_binary.bzl", "python_binary")
load("@fbcode_macros//build_defs:python_library.bzl", "python_library")
load("@fbcode_macros//build_defs:python_unittest.bzl", "python_unittest")

python_library(
    name = "lib",
    srcs = [
        "common.py",
    ],
    deps = [
        "//caffe2:torch",
        "//executorch/exir:lib",
        "//executorch/exir:schema",
    ],
)

python_library(
    name = "models",
    srcs = [
        "models.py",
    ],
    deps = [
        "//caffe2:torch",
        "//executorch/exir:lib",
        "//executorch/exir:lowered_backend_module",
    ],
)

python_library(
    name = "control_flow_models",
    srcs = [
        "control_flow_models.py",
    ],
    deps = [
        "//caffe2:torch",
    ],
)

python_library(
    name = "dynamic_shape_models",
    srcs = [
        "dynamic_shape_models.py",
    ],
    deps = [
        "//caffe2:torch",
    ],
)

python_library(
    name = "transformer",
    srcs = [
        "transformer.py",
    ],
    deps = [
        "//caffe2:torch",
    ],
)

python_library(
    name = "asr_joiner",
    srcs = [
        "asr_joiner.py",
    ],
    deps = [
        "//caffe2:torch",
    ],
)

python_unittest(
    name = "tracer",
    srcs = [
        "test_tracer.py",
    ],
    # Static listing does not support tests generated in runtime.
    supports_static_listing = False,
    deps = [
        "fbsource//third-party/pypi/parameterized:parameterized",
        ":control_flow_models",
        ":lib",
        ":models",
        "//caffe2:torch",
        "//caffe2/functorch:functorch_src",
        "//executorch/exir:error",
        "//executorch/exir:lib",
        "//executorch/exir:schema",
        "//executorch/exir:tracer",
        "//executorch/exir/dialects:lib",
        "//executorch/exir/passes:lib",
    ],
)

python_unittest(
    name = "serde",
    srcs = [
        "test_serde.py",
    ],
    deps = [
        "//caffe2:torch",
        "//executorch/backends:backend_api",
        "//executorch/backends/test:backend_with_compiler_demo",
        "//executorch/backends/test:op_partitioner_demo",
        "//executorch/exir:lib",
        "//executorch/exir/serde:serialize",
    ],
)

python_unittest(
    name = "error",
    srcs = [
        "test_error.py",
    ],
    supports_static_listing = True,
    deps = [
        "//executorch/exir:error",
    ],
)

python_unittest(
    name = "serialize",
    srcs = [
        "test_serialize.py",
    ],
    supports_static_listing = True,
    deps = [
        ":lib",
        "//executorch/exir:print_program",
        "//executorch/exir/serialize:lib",
    ],
)

python_unittest(
    name = "tensor",
    srcs = [
        "test_tensor.py",
    ],
    supports_static_listing = True,
    deps = [
        "//caffe2:torch",
        "//executorch/exir:lib",
        "//executorch/exir:schema",
        "//executorch/exir:tensor",
    ],
)

cpp_library(
    name = "test_lib",
    srcs = [
        "test_lib.cpp",
    ],
    supports_python_dlopen = True,
    deps = [
        "//caffe2:ATen-cpu",
        "//caffe2:torch-cpp-cpu",  # @manual
    ],
)

python_unittest(
    name = "op_convert",
    srcs = [
        "test_op_convert.py",
    ],
    supports_static_listing = True,
    deps = [
        ":test_lib",  # @manual
        "//caffe2:torch",
        "//executorch/exir/operator:convert",
        "//executorch/kernels/portable:custom_ops_generated_lib",
    ],
)

python_unittest(
    name = "memory_planning",
    srcs = [
        "test_memory_planning.py",
    ],
    supports_static_listing = True,
    deps = [
        ":asr_joiner",
        "//caffe2:torch",
        "//executorch/backends:backend_api",
        "//executorch/backends/qnnpack/partition:qnnpack_partitioner",
        "//executorch/exir:lib",
        "//executorch/exir:memory_planning",
        "//executorch/exir:pass_manager",
        "//executorch/exir:print_program",
        "//executorch/exir:schema",
        "//executorch/exir/passes:lib",
        "//executorch/kernels/portable:custom_ops_generated_lib",
    ],
)

python_unittest(
    name = "experimental",
    srcs = [
        "test_experimental.py",
    ],
    supports_static_listing = True,
    deps = [
        ":models",
        "//caffe2:torch",
        "//caffe2/functorch:functorch_src",
        "//executorch/exir:error",
        "//executorch/exir:lib",
        "//executorch/exir/experimental:export_pt2",
        "//executorch/exir/experimental:lib",
    ],
)

python_unittest(
    name = "passes",
    srcs = [
        "test_passes.py",
    ],
    preload_deps = [":test_lib"],
    supports_static_listing = True,
    deps = [
        ":control_flow_models",
        ":lib",
        ":models",
        "//caffe2:torch",
        "//executorch/exir:lib",
        "//executorch/exir:memory",
        "//executorch/exir:memory_planning",
        "//executorch/exir:pass_base",
        "//executorch/exir:pass_manager",
        "//executorch/exir:tensor",
        "//executorch/exir/dialects:lib",
        "//executorch/exir/dialects/edge:lib",
        "//executorch/exir/emit:lib",
        "//executorch/exir/passes:const_prop_pass",
        "//executorch/exir/passes:debug_handle_generator_pass",
        "//executorch/exir/passes:lib",
        "//executorch/exir/passes:remove_assert_async_pass",
        "//executorch/exir/passes:remove_mixed_type_operators",
        "//executorch/exir/passes:replace_edge_with_backend_pass",
        "//executorch/exir/passes:scalar_to_tensor_pass",
        "//executorch/exir/passes:spec_prop_pass",
        "//executorch/exir/passes:symint_to_tensor_pass",
        "//executorch/extension/pybindings:portable",  # @manual
    ],
)

python_unittest(
    name = "pass_infra",
    srcs = [
        "test_pass_infra.py",
    ],
    supports_static_listing = True,
    deps = [
        "//caffe2:torch",
        "//executorch/exir:lib",
        "//executorch/exir:pass_manager",
        "//executorch/exir/passes:lib",
        "//executorch/exir/passes:pass_registry",
    ],
)

python_unittest(
    name = "quant_lowering_custom_backend_pass",
    srcs = [
        "test_quant_lowering_custom_backend_pass.py",
    ],
    supports_static_listing = True,
    deps = [
        "//caffe2:torch",
        "//executorch/backends:backend_api",
        "//executorch/backends:backend_details",
        "//executorch/backends:compile_spec_schema",
        "//executorch/backends:partitioner",
        "//executorch/backends/canonical_partitioners:canonical_partitioner_lib",
        "//executorch/exir:lib",
        "//executorch/exir:pass_base",
        "//executorch/exir:tracer",
        "//executorch/exir/dialects:lib",
        "//executorch/exir/passes:replace_aten_with_edge_pass",
    ],
)

python_unittest(
    name = "common",
    srcs = [
        "test_common.py",
    ],
    supports_static_listing = True,
    deps = [
        "//caffe2:torch",
        "//executorch/exir:common",
    ],
)

python_unittest(
    name = "verification",
    srcs = [
        "test_verification.py",
    ],
    supports_static_listing = True,
    deps = [
        "//caffe2:torch",
        "//executorch/exir:lib",
        "//executorch/exir:schema",
        "//executorch/exir/passes:const_prop_pass",
        "//executorch/exir/passes:lib",
        "//executorch/exir/verification:interpreter",
        "//executorch/exir/verification:verifier",
    ],
)

python_unittest(
    name = "delegate",
    srcs = [
        "test_delegate.py",
    ],
    supports_static_listing = True,
    deps = [
        ":lib",
        ":models",
        "//caffe2:torch",
        "//executorch/exir:lib",
        "//executorch/exir:lowered_backend_module",
        "//executorch/exir:schema",
        "//executorch/exir/dialects:lib",
    ],
)

python_unittest(
    name = "quant_fusion_pass",
    srcs = [
        "test_quant_fusion_pass.py",
    ],
    supports_static_listing = True,
    deps = [
        ":lib",
        "//caffe2:torch",
        "//executorch/exir:lib",
        "//executorch/exir:tracer",
        "//executorch/exir/passes:quant_fusion_pass",
        "//executorch/kernels/quantized:custom_ops_generated_lib",
    ],
)

python_unittest(
    name = "quantization",
    srcs = [
        "test_quantization.py",
    ],
    supports_static_listing = True,
    deps = [
        "//caffe2:torch",
        "//executorch/exir:lib",
        "//executorch/exir:tracer",
        "//executorch/exir/passes:quant_fusion_pass",
        "//executorch/exir/passes:spec_prop_pass",
        "//executorch/kernels/quantized:custom_ops_generated_lib",
        "//pytorch/vision:torchvision",
    ],
)

python_unittest(
    name = "fixtures",
    srcs = [
        "test_fixtures.py",
    ],
    # Static listing does not support tests generated in runtime.
    supports_static_listing = False,
    deps = [
        "fbsource//third-party/pypi/parameterized:parameterized",
        ":lib",
        ":models",
        "//caffe2:torch",
        "//executorch/exir:lib",
        "//executorch/exir/serialize:lib",
    ],
)

python_binary(
    name = "generate_fixtures",
    srcs = [
        "test_fixtures.py",
    ],
    main_module = "executorch.exir.tests.test_fixtures",
    deps = [
        "fbsource//third-party/pypi/parameterized:parameterized",
        ":lib",
        ":models",
        "//caffe2:torch",
        "//executorch/exir:lib",
        "//executorch/exir/serialize:lib",
    ],
)

python_unittest(
    name = "capture",
    srcs = [
        "test_capture.py",
    ],
    # Static listing does not support tests generated in runtime.
    supports_static_listing = False,
    deps = [
        "fbsource//third-party/pypi/parameterized:parameterized",
        ":models",
        "//caffe2:torch",
        "//executorch/exir:lib",
    ],
)

python_unittest(
    name = "dynamic_shape_propagation",
    srcs = [
        "test_dynamic_shape_propagation.py",
    ],
    supports_static_listing = True,
    deps = [
        ":models",
        "//executorch/exir:lib",
        "//executorch/exir/passes:lib",
    ],
)

python_unittest(
    name = "arg_validator",
    srcs = [
        "test_arg_validator.py",
    ],
    supports_static_listing = True,
    deps = [
        "//caffe2:torch",
        "//executorch/exir:lib",
        "//executorch/exir/dialects:lib",
        "//executorch/exir/dialects/edge:lib",
        "//executorch/exir/verification:verifier",
    ],
)
