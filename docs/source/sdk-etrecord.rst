ETRecord
========

Overview
--------

``ETRecord`` is intended to be the debug artifact that is generated by
users ahead of time (when they export their model to run on ExecuTorch).
To draw a rough equivalent to conventional software development,
``ETRecord`` can be considered as the binary built with debug symbols
that is used for debugging in GNU Debugger (gdb). It is expected that
the user will supply this to the ExecuTorch SDK tooling in order for
them to debug and visualize their model.

``ETRecord`` contains numerous components such as:

* Edge dialect graph with debug handles
* Delegate debug handle maps

The ``ETRecord`` object itself is intended to be transparent to users and they should not access any components inside it directly.
It should be provided to the `Inspector API <sdk-inspector.html>`__ to link back performance and debug data sourced from the runtime back to the Python source code.

APIs
----

There are two important APIs users must be aware of when dealing with
``ETRecord``: ``generate_etrecord()`` and ``parse_etrecord()``.

Generating an ``ETRecord`` File
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The user should use the following API to generate an ``ETRecord`` file. They
will be expected to provide the Edge Dialect program (returned by the call to ``to_edge()``),
the ExecuTorch program (returned by the call to ``to_executorch()``), and optional models that
they are interested in working with via our tooling.

.. currentmodule:: sdk.etrecord._etrecord
.. autofunction:: generate_etrecord

Parsing an ``ETRecord``
~~~~~~~~~~~~~~~~~~~~~~~

.. currentmodule:: sdk.etrecord._etrecord
.. autofunction:: parse_etrecord
