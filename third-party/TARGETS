load("@fbsource//xplat/executorch/build/runtime_wrapper.bzl", "runtime")
load("@prelude//rules.bzl", "prebuilt_python_library", "remote_file")
load(":glob_defs.bzl", "subdir_glob")
load(":gflags.bzl", "define_gflags")

define_gflags()

# TODO(chenlai): linux-specific needs to be fixed
remote_file(
    name = "pyyaml-download",
    url = "https://files.pythonhosted.org/packages/12/fc/a4d5a7554e0067677823f7265cb3ae22aed8a238560b5133b58cda252dad/PyYAML-6.0-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
    sha1 = "11aa9c5fe2d890b6a73212beadc7c8a4265ebc39",
    out = "pyyaml.whl",
)

prebuilt_python_library(
    name = "pyyaml",
    binary_src = ":pyyaml-download",
    visibility = ["PUBLIC"],
    deps = [":pyyaml-download"],
)

# TODO(chenlai): linux-specific needs to be fixed
remote_file(
    name = "typing-extensions-download",
    url = "https://files.pythonhosted.org/packages/75/e1/932e06004039dd670c9d5e1df0cd606bf46e29a28e65d5bb28e894ea29c9/typing_extensions-4.2.0-py3-none-any.whl",
    sha1 = "ff0849420e94f425818bff5d0f25e3cdfaba8601",
    out = "typing_extensions-4.2.0-py3-none-any.whl",
)

prebuilt_python_library(
    name = "typing-extensions",
    binary_src = ":typing-extensions-download",
    visibility = ["PUBLIC"],
    deps = [":typing-extensions-download"],
)

runtime.python_library(
    name = "torchgen",
    srcs = subdir_glob(
        [
            ("pytorch/torchgen", "**/*.py"),
        ],
    ),
    base_module = "torchgen",
    visibility = ["PUBLIC"],
    deps = [
        "//third-party:pyyaml",
        "//third-party:typing-extensions",
    ],
    _is_external_target = True,
)

runtime.python_binary(
    name = "gen",
    main_module = "torchgen.gen",
    visibility = [
        "PUBLIC",
    ],
    deps = [
        ":torchgen",
    ],
    _is_external_target = True,
)

runtime.python_binary(
    name = "gen_executorch",
    main_module = "torchgen.gen_executorch",
    visibility = [
        "PUBLIC",
    ],
    deps = [
        ":torchgen",
    ],
    _is_external_target = True,
)

runtime.filegroup(
    name = "aten_src_path",
    srcs = subdir_glob([
        ("pytorch", "aten/src/ATen/templates/*"),
        ("pytorch", "aten/src/ATen/native/native_functions.yaml"),
        ("pytorch", "aten/src/ATen/native/tags.yaml"),
    ]),
    visibility = [
        "PUBLIC",
    ],
    _is_external_target = True,
)

runtime.python_library(
    name = "gen_selected_mobile_ops_header",
    srcs = subdir_glob([
        ("pytorch/tools", "lite_interpreter/gen_selected_mobile_ops_header.py"),
    ]),
    base_module = "tools",
    _is_external_target = True,
)

runtime.python_library(
    name = "gen_oplist_lib",
    srcs = subdir_glob([
        ("pytorch/tools/code_analyzer", "gen_oplist.py"),
        ("pytorch/tools/code_analyzer", "gen_op_registration_allowlist.py"),
    ]),
    base_module = "tools.code_analyzer",
    visibility = ["PUBLIC"],
    deps = [
        ":gen_selected_mobile_ops_header",
        ":torchgen",
        ":pyyaml",
    ],
    _is_external_target = True,
)

runtime.cxx_library(
    name = "flatbuffers-api",
    public_include_directories = ["flatbuffers/include"],
    raw_headers = [
        "flatbuffers/include/flatbuffers/base.h",
        "flatbuffers/include/flatbuffers/flatbuffers.h",
        "flatbuffers/include/flatbuffers/stl_emulation.h",
    ],
    link_style = "static",
    visibility = ["PUBLIC"],
    _is_external_target = True,
)

runtime.cxx_library(
    name = "flatc_library",
    srcs = [
        "flatbuffers/src/code_generators.cpp",
        "flatbuffers/src/flatc.cpp",
        "flatbuffers/src/idl_gen_fbs.cpp",
        "flatbuffers/src/idl_gen_text.cpp",
        "flatbuffers/src/idl_parser.cpp",
        "flatbuffers/src/reflection.cpp",
        "flatbuffers/src/util.cpp",
    ],
    public_include_directories = [
        "flatbuffers/grpc",
        "flatbuffers/include",
    ],
    raw_headers = [
        "flatbuffers/include/flatbuffers/flatc.h",
        "flatbuffers/include/flatbuffers/base.h",
        "flatbuffers/include/flatbuffers/flatbuffers.h",
        "flatbuffers/include/flatbuffers/stl_emulation.h",
        "flatbuffers/include/flatbuffers/code_generators.h",
        "flatbuffers/include/flatbuffers/flexbuffers.h",
        "flatbuffers/include/flatbuffers/hash.h",
        "flatbuffers/include/flatbuffers/idl.h",
        "flatbuffers/include/flatbuffers/minireflect.h",
        "flatbuffers/include/flatbuffers/reflection.h",
        "flatbuffers/include/flatbuffers/reflection_generated.h",
        "flatbuffers/include/flatbuffers/util.h",
    ],
    link_style = "static",
    visibility = ["PUBLIC"],
    _is_external_target = True,
)

runtime.cxx_binary(
    name = "flatc",
    srcs = [
        "flatbuffers/grpc/src/compiler/cpp_generator.cc",
        "flatbuffers/grpc/src/compiler/go_generator.cc",
        "flatbuffers/grpc/src/compiler/java_generator.cc",
        "flatbuffers/grpc/src/compiler/python_generator.cc",
        "flatbuffers/grpc/src/compiler/swift_generator.cc",
        "flatbuffers/grpc/src/compiler/ts_generator.cc",
        "flatbuffers/src/flatc_main.cpp",
        "flatbuffers/src/idl_gen_cpp.cpp",
        "flatbuffers/src/idl_gen_csharp.cpp",
        "flatbuffers/src/idl_gen_dart.cpp",
        "flatbuffers/src/idl_gen_go.cpp",
        "flatbuffers/src/idl_gen_grpc.cpp",
        "flatbuffers/src/idl_gen_java.cpp",
        "flatbuffers/src/idl_gen_js_ts.cpp",
        "flatbuffers/src/idl_gen_json_schema.cpp",
        "flatbuffers/src/idl_gen_kotlin.cpp",
        "flatbuffers/src/idl_gen_lobster.cpp",
        "flatbuffers/src/idl_gen_lua.cpp",
        "flatbuffers/src/idl_gen_php.cpp",
        "flatbuffers/src/idl_gen_python.cpp",
        "flatbuffers/src/idl_gen_rust.cpp",
        "flatbuffers/src/idl_gen_swift.cpp",
        "flatbuffers/src/idl_gen_text.cpp",
        "flatbuffers/src/util.cpp",
    ],
    include_directories = [
        "flatbuffers/grpc",
        "flatbuffers/include",
    ],
    raw_headers = [
        "flatbuffers/grpc/src/compiler/config.h",
        "flatbuffers/grpc/src/compiler/cpp_generator.h",
        "flatbuffers/grpc/src/compiler/go_generator.h",
        "flatbuffers/grpc/src/compiler/java_generator.h",
        "flatbuffers/grpc/src/compiler/python_generator.h",
        "flatbuffers/grpc/src/compiler/python_private_generator.h",
        "flatbuffers/grpc/src/compiler/schema_interface.h",
        "flatbuffers/grpc/src/compiler/swift_generator.h",
        "flatbuffers/grpc/src/compiler/ts_generator.h",
    ],
    visibility = ["PUBLIC"],
    deps = [":flatc_library"],
    link_style = "static",
    _is_external_target = True,
)

runtime.python_library(
    name = "gen_oplist_lib",
    srcs = subdir_glob([
        ("pytorch/tools/code_analyzer", "gen_oplist.py"),
        ("pytorch/tools/code_analyzer", "gen_op_registration_allowlist.py"),
    ]),
    base_module = "tools.code_analyzer",
    visibility = ["PUBLIC"],
    _is_external_target = True,
    deps = [
        ":gen_selected_mobile_ops_header",
        ":torchgen",
        ":pyyaml",
    ],
)
