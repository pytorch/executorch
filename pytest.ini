[pytest]
addopts =
    # show summary of all tests that did not pass
    -rEfX
    # Make tracebacks shorter
    --tb=native
    # capture only Python print and C++ py::print, but not C output (low-level Python errors)
    --capture=sys
    # don't suppress warnings, but don't shove them all to the end either
    -p no:warnings

    # === TEST DIRECTORIES TO RUN ===

    # ci/scripts
    .ci/scripts/tests

    # backends
    backends/apple/coreml/test
    backends/test/harness/tests
    backends/test/suite/tests
    backends/transforms
    backends/xnnpack/test
    # Ignore ARM backend - requires running examples/arm/setup.sh to install tools
    --ignore-glob=backends/arm/**/*
    # Ignore failing xnnpack tests
    --ignore=backends/xnnpack/test/ops/test_linear.py
    --ignore=backends/xnnpack/test/ops/test_bmm.py
    --ignore=backends/xnnpack/test/quantizer/test_xnnpack_quantizer.py
    # Ignore backends/test root - WIP testing infra, see https://github.com/pytorch/executorch/discussions/11140
    --ignore=backends/test

    # codegen
    codegen/test

    # devtools
    devtools/
    # Ignore test with missing dependencies
    --ignore=devtools/visualization/visualization_utils_test.py

    # examples
    examples/models/test
    examples/models/llama/tests
    examples/models/llama/config
    examples/models/llama3_2_vision/preprocess
    examples/models/llama3_2_vision/vision_encoder/test
    examples/models/llama3_2_vision/text_decoder/test
    examples/models/llava/test
    # Ignore test requiring torchao - T200992559: Add torchao to ET as core dependency
    --ignore=examples/models/llama/tests/test_pre_quantization_transforms.py
    # Failing test
    --ignore=examples/models/llama/tests/test_ring_attention.py
    # Ignore test with missing dependencies
    --ignore=examples/models/llava/test/test_pte.py
    # Ignore failing llava tests (missing accelerate dependency)
    --ignore=examples/models/llava/test/test_llava.py

    # exir
    exir/
    # Ignore tests with missing custom_ops_generated_lib dependencies
    --ignore=exir/backend/test/demos/test_delegate_aten_mode.py
    --ignore=exir/backend/test/demos/test_xnnpack_qnnpack.py
    --ignore=exir/tests/test_memory_format_ops_pass_aten.py
    --ignore=exir/tests/test_memory_planning.py
    --ignore=exir/tests/test_passes.py
    --ignore=exir/tests/test_quantization.py
    --ignore=exir/tests/test_verification.py
    --ignore=exir/verification/test/test_verifier.py
    # Ignore failing tests
    --ignore=exir/backend/test/demos/rpc/test_rpc.py
    --ignore=exir/backend/test/test_backends.py
    --ignore=exir/backend/test/test_backends_lifted.py
    --ignore=exir/backend/test/test_partitioner.py
    --ignore=exir/operator/test/test_operator.py
    --ignore=exir/tests/test_common.py
    --ignore=exir/tests/test_op_convert.py

    # export
    export/tests
    --ignore=export/tests/test_export_stages.py

    # extension
    extension/
    # Ignore tests with missing dependencies or build issues
    --ignore=extension/flat_tensor/test/test_serialize.py
    --ignore=extension/llm/custom_ops/test_preprocess_custom_ops.py
    --ignore=extension/llm/tokenizers/third-party/re2/python/re2_test.py
    --ignore=extension/llm/tokenizers/third-party/sentencepiece/python/test/sentencepiece_test.py
    # Ignore failing tokenizer tests
    --ignore=extension/llm/tokenizers/test/test_tekken_python.py

    # kernels
    kernels/prim_ops/test
    kernels/quantized
    kernels/test/test_case_gen.py
    # Ignore test depending on test-only cpp ops lib
    --ignore=kernels/quantized/test/test_quant_dequant_per_token.py

    # profiler
    profiler/
    # Ignore test with missing dependencies
    --ignore=profiler/test/test_profiler_e2e.py

    # runtime
    runtime
    # Ignore tests with missing compiler dependencies
    --ignore=runtime/test/test_runtime_etdump_gen.py
    # test
    test/
    # Ignore tests with missing dependencies
    --ignore=test/end2end/test_end2end.py
    --ignore=test/end2end/test_temp_allocator_fix.py

    # tools
    tools/cmake

# run the same tests multiple times to determine their
# flakiness status. Default to 50 re-runs
flake-finder = true
flake-runs = 50
