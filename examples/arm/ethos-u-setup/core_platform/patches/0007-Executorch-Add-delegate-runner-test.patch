From f6855b68b4847f6a1209b8b27a32a6b04543a0be Mon Sep 17 00:00:00 2001
From: Rob Elliott <robert.elliott@arm.com>
Date: Wed, 4 Oct 2023 13:31:33 +0000
Subject: [Executorch 7/7] Add delegate runner test

Signed-off-by: Rob Elliott <robert.elliott@arm.com>
---
 applications/executorch_tests/CMakeLists.txt   | 13 +++++++------
 applications/executorch_tests/pte_to_header.py | 11 +++++++++--
 applications/executorch_tests/runner.cpp       | 10 ++++++++--
 cmake/toolchain/arm-none-eabi-gcc.cmake        |  6 ++----
 4 files changed, 26 insertions(+), 14 deletions(-)

diff --git a/applications/executorch_tests/CMakeLists.txt b/applications/executorch_tests/CMakeLists.txt
index c95d53e..5f70e8e 100644
--- a/applications/executorch_tests/CMakeLists.txt
+++ b/applications/executorch_tests/CMakeLists.txt
@@ -42,6 +42,7 @@ message("ExecuTorch pte file (ET_PTE_FILE_PATH)  : ${ET_PTE_FILE_PATH}")
 message("**********************")
 
 set(LIB_ET_RUNTIME "${ET_BUILD_DIR_PATH}/libexecutorch.a")
+set(LIB_ET_ETHOS "${ET_BUILD_DIR_PATH}/backends/arm/libexecutorch_delegate_ethos_u.a")
 set(LIB_ET_OP_REGISTRATION "${ET_BUILD_DIR_PATH}/kernels/portable/libportable_ops_lib.a")
 set(LIB_ET_OP_KERNELS "${ET_BUILD_DIR_PATH}/kernels/portable/libportable_kernels.a")
 
@@ -55,9 +56,9 @@ add_custom_command(
         ${CMAKE_CURRENT_BINARY_DIR}/fake_dep
         ${CMAKE_CURRENT_BINARY_DIR}/model_pte.h
     COMMAND ${PYTHON_EXECUTABLE} ./pte_to_header.py --pte ${ET_PTE_FILE_PATH}
-    --out ${CMAKE_CURRENT_BINARY_DIR}
+    --outdir ${CMAKE_CURRENT_BINARY_DIR}
     WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
-    )
+)
 
 ethosu_add_executable_test(executor_runner PRIVATE
     WHOLE_ARCHIVE TRUE
@@ -65,12 +66,12 @@ ethosu_add_executable_test(executor_runner PRIVATE
     LIBRARIES
     ${LIB_ET_RUNTIME}
     ${LIB_ET_OP_REGISTRATION}
-    ${LIB_ET_OP_KERNELS})
-
-add_dependencies(executor_runner gen_model_header)
+    ${LIB_ET_OP_KERNELS}
+    ${LIB_ET_ETHOS}
+)
 
 target_include_directories(executor_runner PRIVATE
 ${ET_INCLUDE_PATH}
 ${CMAKE_CURRENT_BINARY_DIR})
 
-# TODO Memory setup
+add_dependencies(executor_runner gen_model_header)
diff --git a/applications/executorch_tests/pte_to_header.py b/applications/executorch_tests/pte_to_header.py
index 37d88aa..be3282d 100644
--- a/applications/executorch_tests/pte_to_header.py
+++ b/applications/executorch_tests/pte_to_header.py
@@ -30,11 +30,18 @@ parser.add_argument(
 )
 parser.add_argument(
     "--outdir",
-    help="Output dir for model_pte.h",
+    help="Output dir for model header",
     type=str,
     required=False,
     default=".",
 )
+parser.add_argument(
+    "--outfile",
+    help="Output filename for model header",
+    type=str,
+    required=False,
+    default="model_pte.h",
+)
 parser.add_argument(
     "--section",
     help="Section attribute for the data array",
@@ -43,7 +50,7 @@ parser.add_argument(
     default=".sram.data",
 )
 args = parser.parse_args()
-outfile = os.path.join(args.outdir, "model_pte.h")
+outfile = os.path.join(args.outdir, args.outfile)
 attr = f'__attribute__((section("{args.section}"), aligned(16))) char '
 
 with open(args.pte, "rb") as fr, open(
diff --git a/applications/executorch_tests/runner.cpp b/applications/executorch_tests/runner.cpp
index 7ef920d..9dc3519 100644
--- a/applications/executorch_tests/runner.cpp
+++ b/applications/executorch_tests/runner.cpp
@@ -16,9 +16,10 @@
 #include <executorch/runtime/platform/runtime.h>
 #include <executorch/util/util.h>
 
-// Model file - TODO make this configurable through CMake
+// Model file, built from pte file passed to CMAKE as ET_PTE_FILE_PATH
 #include "model_pte.h"
 
+using namespace exec_aten;
 using namespace std;
 using torch::executor::Result;
 using torch::executor::Error;
@@ -125,8 +126,13 @@ int main() {
     status = method->get_outputs(outputs.data(), outputs.size());
     ET_CHECK(status == Error::Ok);
     for (int i = 0; i < outputs.size(); ++i) {
+       Tensor t = outputs[i].toTensor();
        for (int j = 0; j < outputs[i].toTensor().numel(); ++j) {
-          printf("Output[%d][%d]: %f\n", i, j, outputs[i].toTensor().const_data_ptr<float>()[j]);
+          if( t.scalar_type() == ScalarType::Int ) {
+             printf("Output[%d][%d]: %d\n", i, j, outputs[i].toTensor().const_data_ptr<int>()[j]);
+          } else {
+              printf("Output[%d][%d]: %f\n", i, j, outputs[i].toTensor().const_data_ptr<float>()[j]);
+          }
        }
     }
     return 0;
diff --git a/cmake/toolchain/arm-none-eabi-gcc.cmake b/cmake/toolchain/arm-none-eabi-gcc.cmake
index 0e6a2ed..fdb0d7c 100644
--- a/cmake/toolchain/arm-none-eabi-gcc.cmake
+++ b/cmake/toolchain/arm-none-eabi-gcc.cmake
@@ -98,8 +98,6 @@ add_compile_options(
     # -Wswitch
     # -Wswitch-default
     # -Wunused
-
-    # -Wno-redundant-decls
-
-    # -Wno-psabi
+    -Wno-redundant-decls
+    -Wno-psabi
 )
-- 
2.42.0

