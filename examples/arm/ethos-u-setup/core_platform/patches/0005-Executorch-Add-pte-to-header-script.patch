From 55019e4eb8d39f3fb1fb303380e903294604837c Mon Sep 17 00:00:00 2001
From: Digant Desai <digantdesai@meta.com>
Date: Tue, 3 Oct 2023 21:20:07 -0700
Subject: [Executorch 5/7] Add pte to header script

---
 .../executorch_tests/pte_to_header.py         | 65 +++++++++++++++++++
 1 file changed, 65 insertions(+)
 create mode 100644 applications/executorch_tests/pte_to_header.py

diff --git a/applications/executorch_tests/pte_to_header.py b/applications/executorch_tests/pte_to_header.py
new file mode 100644
index 0000000..37d88aa
--- /dev/null
+++ b/applications/executorch_tests/pte_to_header.py
@@ -0,0 +1,65 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+# All rights reserved.
+#
+# This source code is licensed under the BSD-style license found in the
+# LICENSE file in the root directory of this source tree.
+
+import binascii
+import os
+from argparse import ArgumentParser, ArgumentTypeError
+
+# Also see: https://git.mlplatform.org/ml/ethos-u/ml-embedded-evaluation-kit.git/tree/scripts/py/gen_model_cpp.py
+
+bytes_per_line = 32
+hex_digits_per_line = bytes_per_line * 2
+
+
+def input_file_path(path):
+    if os.path.exists(path):
+        return path
+    else:
+        raise ArgumentTypeError(f"input filepath:{path} does not exist")
+
+
+parser = ArgumentParser()
+parser.add_argument(
+    "--pte",
+    help="ExecuTorch .pte model file",
+    type=input_file_path,
+    required=True,
+)
+parser.add_argument(
+    "--outdir",
+    help="Output dir for model_pte.h",
+    type=str,
+    required=False,
+    default=".",
+)
+parser.add_argument(
+    "--section",
+    help="Section attribute for the data array",
+    type=str,
+    required=False,
+    default=".sram.data",
+)
+args = parser.parse_args()
+outfile = os.path.join(args.outdir, "model_pte.h")
+attr = f'__attribute__((section("{args.section}"), aligned(16))) char '
+
+with open(args.pte, "rb") as fr, open(
+    outfile, "w"
+) as fw:
+    data = fr.read()
+    hexstream = binascii.hexlify(data).decode("utf-8")
+    hexstring = attr + "model_pte[] = {"
+
+    for i in range(0, len(hexstream), 2):
+        if 0 == (i % hex_digits_per_line):
+            hexstring += "\n"
+        hexstring += "0x" + hexstream[i : i + 2] + ", "
+
+    hexstring += "};\n"
+    fw.write(hexstring)
+    print(
+        f"Input: {args.pte} with {len(data)} bytes. Output: {outfile} with {len(hexstring)} bytes. Section: {args.section}."
+    )
-- 
2.42.0

