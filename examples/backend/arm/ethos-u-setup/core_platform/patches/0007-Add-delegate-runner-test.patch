From 12e841a383069f0b3d0e9c51c793c2922a590ae0 Mon Sep 17 00:00:00 2001
From: Rob Elliott <robert.elliott@arm.com>
Date: Wed, 4 Oct 2023 13:31:33 +0000
Subject: [PATCH] Add delegate runner test

Signed-off-by: Rob Elliott <robert.elliott@arm.com>
---
 applications/executorch_tests/CMakeLists.txt  |  21 ++-
 applications/executorch_tests/add.pte.h       |  70 ++++++++++
 .../executorch_tests/runner_delegate.cpp      | 132 ++++++++++++++++++
 3 files changed, 221 insertions(+), 2 deletions(-)
 create mode 100644 applications/executorch_tests/add.pte.h
 create mode 100644 applications/executorch_tests/runner_delegate.cpp

diff --git a/applications/executorch_tests/CMakeLists.txt b/applications/executorch_tests/CMakeLists.txt
index c95d53e..195c8a3 100644
--- a/applications/executorch_tests/CMakeLists.txt
+++ b/applications/executorch_tests/CMakeLists.txt
@@ -44,6 +44,7 @@ message("**********************")
 set(LIB_ET_RUNTIME "${ET_BUILD_DIR_PATH}/libexecutorch.a")
 set(LIB_ET_OP_REGISTRATION "${ET_BUILD_DIR_PATH}/kernels/portable/libportable_ops_lib.a")
 set(LIB_ET_OP_KERNELS "${ET_BUILD_DIR_PATH}/kernels/portable/libportable_kernels.a")
+set(LIB_ET_ETHOS "${ET_BUILD_DIR_PATH}/backends/arm/libethos_u.a")
 
 add_custom_target(
     gen_model_header ALL
@@ -67,10 +68,26 @@ ethosu_add_executable_test(executor_runner PRIVATE
     ${LIB_ET_OP_REGISTRATION}
     ${LIB_ET_OP_KERNELS})
 
-add_dependencies(executor_runner gen_model_header)
-
 target_include_directories(executor_runner PRIVATE
 ${ET_INCLUDE_PATH}
 ${CMAKE_CURRENT_BINARY_DIR})
 
+ethosu_add_executable_test(executor_runner_delegate PRIVATE
+    WHOLE_ARCHIVE TRUE
+    SOURCES runner_delegate.cpp
+    LIBRARIES
+    ${LIB_ET_RUNTIME}
+    ${LIB_ET_OP_REGISTRATION}
+    ${LIB_ET_OP_KERNELS}
+	${LIB_ET_ETHOS}
+  )
+
+target_include_directories(executor_runner_delegate PRIVATE
+${ET_INCLUDE_PATH}
+${CMAKE_CURRENT_BINARY_DIR})
+  
+add_dependencies(executor_runner gen_model_header)
+
+
+
 # TODO Memory setup
diff --git a/applications/executorch_tests/add.pte.h b/applications/executorch_tests/add.pte.h
new file mode 100644
index 0000000..05bc0ec
--- /dev/null
+++ b/applications/executorch_tests/add.pte.h
@@ -0,0 +1,70 @@
+__attribute__((section(".sram.data"), aligned(16))) char add_pte[] = {
+0x24, 0x00, 0x00, 0x00, 0x45, 0x54, 0x31, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x14, 0x00, 0x00, 0x00, 0x04, 0x00, 0x08, 0x00, 
+0x0c, 0x00, 0x10, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xf4, 0x04, 0x00, 0x00, 0xdc, 0x04, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
+0x04, 0x00, 0x00, 0x00, 0x36, 0xf9, 0xff, 0xff, 0x04, 0x00, 0x00, 0x00, 0xb0, 0x04, 0x00, 0x00, 0x76, 0x65, 0x6c, 0x61, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x00, 
+0x63, 0x6d, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+0x43, 0x4f, 0x50, 0x31, 0x01, 0x00, 0x10, 0x00, 0x07, 0x18, 0x00, 0x00, 0x00, 0x00, 0x06, 0x10, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x00, 0x55, 0x00, 
+0x25, 0x40, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x26, 0x40, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x01, 0x01, 0x00, 0x00, 0x40, 0x00, 0x00, 
+0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x01, 0x00, 0x00, 
+0x0c, 0x01, 0x00, 0x00, 0x0a, 0x01, 0x00, 0x00, 0x04, 0x01, 0x04, 0x00, 0x06, 0x40, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x40, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 
+0x14, 0x00, 0x00, 0x00, 0x09, 0x01, 0x00, 0x00, 0x05, 0x01, 0x09, 0x00, 0x07, 0x01, 0x00, 0x00, 0x1f, 0x01, 0x01, 0x00, 0x10, 0x40, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x11, 0x40, 0x00, 0x00, 
+0x00, 0x00, 0x00, 0x00, 0x12, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x01, 0x00, 0x00, 0x1c, 0x01, 0x00, 0x00, 0x1a, 0x01, 0x00, 0x00, 
+0x12, 0x01, 0x00, 0x00, 0x11, 0x01, 0x00, 0x00, 0x13, 0x01, 0x04, 0x00, 0x16, 0x40, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x15, 0x40, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x40, 0x00, 0x00, 
+0x14, 0x00, 0x00, 0x00, 0x18, 0x01, 0x00, 0x00, 0x14, 0x01, 0x05, 0x01, 0x25, 0x01, 0x00, 0x00, 0x26, 0x01, 0x00, 0x80, 0x27, 0x01, 0xff, 0x7f, 0x16, 0x01, 0x00, 0x00, 0x15, 0x01, 0x01, 0x00, 
+0x17, 0x01, 0x07, 0x00, 0x0d, 0x01, 0x16, 0x00, 0x2d, 0x01, 0x16, 0x00, 0x8d, 0x01, 0x0a, 0x00, 0x24, 0x01, 0x00, 0x00, 0x8f, 0x01, 0x01, 0x00, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+0x81, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x82, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x01, 0x00, 0x00, 0x8c, 0x01, 0x00, 0x00, 
+0x8a, 0x01, 0x00, 0x00, 0x86, 0x40, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x85, 0x40, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x84, 0x40, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x89, 0x01, 0x00, 0x00, 
+0x85, 0x01, 0x09, 0x00, 0x80, 0x01, 0x00, 0x00, 0x2f, 0x01, 0x00, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x63, 0x72, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x00, 0x00, 0x00, 
+0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+0x73, 0x63, 0x72, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x63, 0x72, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x68, 0x00, 
+0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+0x73, 0x63, 0x72, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 
+0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x00, 0x00, 0x00, 0x00, 
+0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x00, 0x00, 0x00, 0x00, 
+0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x5f, 0x73, 0x69, 0x7a, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x00, 0x00, 0x00, 
+0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x63, 0x72, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x00, 
+0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x65, 0x6c, 0x61, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x00, 
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0xfe, 0xff, 0xff, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
+0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x28, 0x00, 0x04, 0x00, 0x08, 0x00, 0x0c, 0x00, 0x10, 0x00, 0x14, 0x00, 0x18, 0x00, 0x1c, 0x00, 0x20, 0x00, 0x24, 0x00, 0x16, 0x00, 0x00, 0x00, 
+0x44, 0x03, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, 0x2c, 0x01, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00, 0x14, 0x01, 0x00, 0x00, 0xac, 0x00, 0x00, 0x00, 0xa4, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 
+0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
+0x76, 0xff, 0xff, 0xff, 0x68, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6c, 0xfe, 0xff, 0xff, 0x34, 0x00, 0x00, 0x00, 
+0x04, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x2f, 0x74, 0x6d, 0x70, 0x2f, 0x61, 0x72, 0x6d, 0x5f, 0x74, 0x6f, 0x73, 0x61, 0x5f, 0x6d, 0x7a, 0x74, 0x66, 0x5f, 0x62, 0x76, 0x67, 0x2f, 0x73, 
+0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x2f, 0x74, 0x6f, 0x73, 0x61, 0x2f, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x74, 0x6f, 0x73, 0x61, 0x5f, 0x70, 
+0x61, 0x74, 0x68, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x41, 0x72, 0x6d, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x04, 0x00, 0x08, 0x00, 0x0c, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 
+0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x08, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0c, 0x00, 0x00, 0x00, 
+0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
+0xb0, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x05, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x14, 0x00, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 
+0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x20, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x88, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 
+0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x08, 0x00, 0x0e, 0x00, 0x07, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 
+0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x16, 0x00, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 
+0x24, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
+0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x08, 0x00, 0x0c, 0x00, 0x04, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
+0x39, 0x00, 0x00, 0x00, 0x5b, 0x31, 0x2c, 0x20, 0x7b, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x2c, 0x20, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 
+0x3a, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x2c, 0x20, 0x22, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x22, 0x3a, 0x20, 0x5b, 0x5d, 0x7d, 0x5d, 0x00, 0x00, 0x00, 
+0xfe, 0x00, 0x00, 0x00, 0x5b, 0x31, 0x2c, 0x20, 0x7b, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x73, 0x2e, 0x74, 0x75, 0x70, 0x6c, 0x65, 
+0x22, 0x2c, 0x20, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x3a, 0x20, 0x22, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x2c, 0x20, 0x22, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x5f, 
+0x73, 0x70, 0x65, 0x63, 0x22, 0x3a, 0x20, 0x5b, 0x7b, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x73, 0x2e, 0x74, 0x75, 0x70, 0x6c, 0x65, 
+0x22, 0x2c, 0x20, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x3a, 0x20, 0x22, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x2c, 0x20, 0x22, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x5f, 
+0x73, 0x70, 0x65, 0x63, 0x22, 0x3a, 0x20, 0x5b, 0x7b, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x2c, 0x20, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 
+0x3a, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x2c, 0x20, 0x22, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x22, 0x3a, 0x20, 0x5b, 0x5d, 0x7d, 0x5d, 0x7d, 0x2c, 0x20, 
+0x7b, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x22, 0x2c, 0x20, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x65, 
+0x78, 0x74, 0x22, 0x3a, 0x20, 0x22, 0x5b, 0x5d, 0x22, 0x2c, 0x20, 0x22, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x22, 0x3a, 0x20, 0x5b, 0x5d, 0x7d, 0x5d, 
+0x7d, 0x5d, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x00, };
diff --git a/applications/executorch_tests/runner_delegate.cpp b/applications/executorch_tests/runner_delegate.cpp
new file mode 100644
index 0000000..fe77d83
--- /dev/null
+++ b/applications/executorch_tests/runner_delegate.cpp
@@ -0,0 +1,132 @@
+/*
+ * SPDX-FileCopyrightText: Copyright 2021-2023 Arm Limited and/or its affiliates <open-source-office@arm.com>
+ *
+ * SPDX-License-Identifier: Apache-2.0
+ *
+ * Licensed under the Apache License, Version 2.0 (the License); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an AS IS BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/****************************************************************************
+ * Includes
+ ****************************************************************************/
+
+#include <stdio.h>
+#include <vector>
+#include <memory>
+
+using namespace std;
+
+#include <executorch/runtime/platform/runtime.h>
+#include <executorch/runtime/executor/program.h>
+#include <executorch/extension/data_loader/buffer_data_loader.h>
+#include <executorch/runtime/platform/log.h>
+#include <executorch/util/util.h>
+
+/****************************************************************************
+ * Data
+ ****************************************************************************/
+
+// Our .pte file generated from the AoT flow
+#include "add.pte.h"
+
+// Storage for intermediate data in SRAM
+__attribute__((section(".sram.data"), aligned(16))) uint8_t method_allocator_pool[4 * 1024U];
+
+
+int main()
+{
+	printf("test test test NG ^2 22\n");
+	printf("main: Initialising runtime\n");
+    torch::executor::runtime_init();
+
+    using torch::executor::Result;
+    using torch::executor::Error;
+
+	// Load pte from the global add_pte .pte file loaded into SRAM.
+    auto loader = torch::executor::util::BufferDataLoader(add_pte, sizeof(add_pte));
+    Result<torch::executor::Program> program = torch::executor::Program::load(&loader);
+    if(!program.ok()) {
+		printf("main: Program loading failed @ 0x%p: 0x%x", add_pte, (int)program.error());
+    }
+    printf("main: Model buffer loaded, has %u methods\n", program->num_methods());
+
+	// Find our entrypoint in the .pte program
+    const char* method_name = nullptr;
+	const auto method_name_result = program->get_method_name(0);
+	ET_CHECK_MSG(method_name_result.ok(), "Program has no methods");
+	method_name = *method_name_result;
+    printf("main: Found (and will run) method '%s'\n", method_name);
+
+	// Allocate necessary memories for this method
+    Result<torch::executor::MethodMeta> method_meta = program->method_meta(method_name);
+    if (!method_meta.ok()) {
+        printf("main: Failed to get method_meta for %s: 0x%x",
+                method_name, (unsigned int)method_meta.error());
+    }
+	
+    torch::executor::MemoryAllocator method_allocator{
+        torch::executor::MemoryAllocator(sizeof(method_allocator_pool), method_allocator_pool)};
+
+    std::vector<std::unique_ptr<uint8_t[]>> planned_buffers; // Owns the memory
+    std::vector<torch::executor::Span<uint8_t>> planned_spans; // Passed to the allocator
+    size_t num_memory_planned_buffers = method_meta->num_memory_planned_buffers();
+
+    for (size_t id = 0; id < num_memory_planned_buffers; ++id) {
+        size_t buffer_size = static_cast<size_t>(method_meta->memory_planned_buffer_size(id).get());
+        printf("main: Setting up planned buffer %zu, size %zu.\n", id, buffer_size);
+
+        planned_buffers.push_back(std::make_unique<uint8_t[]>(buffer_size));
+        planned_spans.push_back({planned_buffers.back().get(), buffer_size});
+    }
+
+    torch::executor::HierarchicalAllocator planned_memory(
+      {planned_spans.data(), planned_spans.size()});
+
+    torch::executor::MemoryManager memory_manager(&method_allocator, &planned_memory);
+
+    Result<torch::executor::Method> method = program->load_method(method_name, &memory_manager);
+
+    if(!method.ok()) {
+        printf("main: Loading of method %s failed with status 0x%x\n", method_name, (int)method.error());
+    }
+	printf("main: Loading of method '%s' succesful\n", method_name);
+
+    printf("main: Preparing inputs...\n");
+    auto inputs = torch::executor::util::PrepareInputTensors(*method);
+
+    printf("main: Starting the model execution...\n");
+    Error status = method->execute();
+    if(status != Error::Ok){
+        printf("main: Execution of method %s failed with status 0x%x\n", method_name, (int)status);
+    } else {
+        printf("main: Model executed successfully.\n");
+    }
+
+    // Print the outputs.
+    std::vector<torch::executor::EValue> outputs(method->outputs_size());
+    printf("main: %d outputs - ", outputs.size());
+    status = method->get_outputs(outputs.data(), outputs.size());
+    ET_CHECK(status == Error::Ok);
+    for (size_t i = 0; i < outputs.size(); ++i)
+	{
+		printf("main: Output %d numel %d\n", i, outputs[i].toTensor().numel());
+		for (size_t j = 0; j < outputs[i].toTensor().numel(); ++j)
+		{
+			printf("main:   Output[%d]: %d\n", j, outputs[i].toTensor().const_data_ptr<int>()[j]);
+		}
+    }
+
+	return 0;
+}
+
+
-- 
2.41.0

