From ef07230fbb15edbf27ecaf48994fb157430a5e7c Mon Sep 17 00:00:00 2001
From: Rob Elliott <robert.elliott@arm.com>
Date: Thu, 5 Oct 2023 16:45:42 +0000
Subject: [PATCH] Improve rescale codegen for TOSA

Signed-off-by: Rob Elliott <robert.elliott@arm.com>
---
 ethosu/vela/tosa_graph_optimiser.py | 56 +++++++++++------------------
 ethosu/vela/tosa_mapping.py         |  2 +-
 2 files changed, 22 insertions(+), 36 deletions(-)

diff --git a/ethosu/vela/tosa_graph_optimiser.py b/ethosu/vela/tosa_graph_optimiser.py
index df6b575..b2e3697 100644
--- a/ethosu/vela/tosa_graph_optimiser.py
+++ b/ethosu/vela/tosa_graph_optimiser.py
@@ -337,7 +337,8 @@ def rewrite_concat(op):
 
 def remove_memory_ops(op, arch):
     if op.run_on_npu and op.type in (Op.Reshape, Op.Identity):
-        bypass_memory_only_ops(op)
+        # TODO: is this ok - function doesn't use arch or nng
+        bypass_memory_only_ops(op, arch, None)
 
 
 def rewrite_activation(op, arch, nng):
@@ -357,7 +358,6 @@ def rewrite_activation(op, arch, nng):
 
     return op
 
-
 def rewrite_rescale(op, arch, nng):
     if op.type == Op.Rescale:
         ifm = op.ifm
@@ -368,7 +368,7 @@ def rewrite_rescale(op, arch, nng):
         prev_op = ifm.ops[0]
 
         # TODO currently not supported
-        assert len(ifm.consumer_list) == 1
+        #assert len(ifm.consumer_list) == 1
 
         input_zp = op.attrs["input_zp"]
         output_zp = op.attrs["output_zp"]
@@ -390,6 +390,9 @@ def rewrite_rescale(op, arch, nng):
             assert False
         ifm.quantization.zero_point = input_zp
         ofm.quantization.zero_point = output_zp
+
+        assert False == per_channel, "Don't like per_channel!"
+        
         for s, m in zip(shift, multiplier):
             # TODO these are the TOSA limitations
             assert m >= 0
@@ -403,45 +406,28 @@ def rewrite_rescale(op, arch, nng):
         else:
             rounding_mode = RoundingMode.HalfUp
 
-        if prev_op.type.is_depthwise_conv2d_op() or prev_op.type.is_conv2d_op() or prev_op.type == Op.FullyConnected:
+        fuse = len(ifm.ops) == 1 and prev_op.type.is_depthwise_conv2d_op() or prev_op.type.is_conv2d_op()
+        if fuse:
+            # TODO: ERROR: bias.values didn't exist for an op like Add - presumably not a capability of that op
             assert len(multiplier) == len(shift) == len(prev_op.bias.values)
-
-            if ifm.dtype == DataType.int32 and per_channel:
-                prev_op.explicit_scaling = explicit_scaling
-                prev_op.rounding_mode = rounding_mode
-
-                # Bypass op
-                prev_op.set_output_tensor(ofm)
-                DebugDatabase.add_optimised(op, prev_op)
-                return op
-            else:
-                print("Warning, unsupported fusing of TOSA Rescale previous operator is of type:", prev_op.type)
-                assert False
-        # TODO which are the cases we need to and can do standalone Rescale?
-        # TODO should we try to identify a conversion uint8<->int8 accomplished by 2 RESCALE ops?
-        # origin might be TFLite op QUANTIZE, should we look to see if they can be translated to QUANTIZE?
-        # limited to these at the moment:
-        elif (
-            (ifm.dtype == DataType.int8 and ofm.dtype == DataType.int8)
-            or (ifm.dtype == DataType.uint8 and ofm.dtype == DataType.int8)
-            or (ifm.dtype == DataType.int8 and ofm.dtype == DataType.uint8)
-        ):
-            # Create  NOP performing the RESCALE
+            # TODO: generate replacement fusion code from below
+            assert False, "Fusion possible but i've not implemented it"
+        else:
+            # Generate Rescale behaviour attached to a compatible NOP
+            # TODO: I assume this attaches a new operator into the graph??
             avgpool_op = replace_rescale_with_avg_pool(op)
             avgpool_op.rounding_mode = rounding_mode
-
+            
             if per_channel:
-                # TODO
-                avgpool_op.explicit_scaling = explicit_scaling
-                print("Warning, unsupported TOSA Rescale")
-                assert False
+                assert False, "Assert above removed but still not implemented... :/"
             else:
                 avgpool_op.explicit_scaling = explicit_scaling
-        else:
-            print("Warning, unsupported fusing of TOSA Rescale previous operator is of type:", prev_op.type)
-            assert False
-    return op
 
+        #print( len(multiplier), len(shift), len(prev_op.get_bias_tensors()) )
+        #print( ifm.dtype, "PC:", per_channel, op.type )
+        #print( ifm.dtype, ofm.dtype )
+            
+    return op
 
 def convert_pad_in_width(op):
     """
diff --git a/ethosu/vela/tosa_mapping.py b/ethosu/vela/tosa_mapping.py
index 2dafd81..ed5aa2e 100644
--- a/ethosu/vela/tosa_mapping.py
+++ b/ethosu/vela/tosa_mapping.py
@@ -148,7 +148,7 @@ transpose_conv_attrs = AttrSerializer(
 )
 transpose_attrs = AttrSerializer("TransposeAttribute", (("perms", is_vec),))
 axis_attrs = AttrSerializer("AxisAttribute", ("axis",))
-reshape_attrs = AttrSerializer("ReshapeAttribute", (("shape", is_vec),))
+reshape_attrs = AttrSerializer("ReshapeAttribute", (("newShape", is_vec),))
 slice_attrs = AttrSerializer("SliceAttribute", (("start", is_vec), ("size", is_vec)))
 tile_attrs = AttrSerializer("TileAttribute", (("multiplies", is_vec),))
 resize_attrs = AttrSerializer(
-- 
2.41.0

